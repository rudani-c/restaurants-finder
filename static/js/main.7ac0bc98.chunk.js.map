{"version":3,"sources":["components/Pagination/Pagination.js","constants/constants.js","components/RestaurantList/RestaurantList.js","components/SearchFilter/SearchFilter.js","store/actions/restaurants.js","constants/urls.js","containers/Restaurants.js","App.js","store/reducers/restaurants.js","reportWebVitals.js","index.js","store/index.js"],"names":["Pagination","dataPerPage","totaldata","paginate","currentPage","pageNumbers","i","Math","ceil","push","className","onClick","map","number","index","applyStyle","join","length","states","RestaurantList","props","state","stateFilter","genreFilter","txtFiter","txtFilterActive","nameSort","filteredRestaurants","this","restaurants","trim","filter","rest","toUpperCase","includes","genre","name","setState","sort","sortByName","order","ra","rb","nameA","nameB","id","value","onChange","e","target","type","placeholder","filterAndSort","restaurant","city","telephone","Component","SearchFilter","handleChange","bind","handleKeyDown","event","key","onClickHandler","onKeyDown","SET_RESTAURANTS","setRestaurants","data","restaurantApiActions","fetch","getRestaurantDetails","dispatch","a","headers","Authorization","response","status","json","fetchRestaurants","RestaurantsContainer","pageNumber","searchFilter","undefined","gridData","row","toLowerCase","indexOf","nextProps","indexOfLastPost","indexOfFirstPost","currentGridData","slice","RestaurantPage","connect","restaurantReducer","App","initialState","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"2SAIaA,G,MAAa,SAAC,GAGvB,IAH8E,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACrDC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKN,EAAYD,GAAcK,IACrDD,EAAYI,KAAKH,GAGrB,OACI,8BACI,sBAAKI,UAAU,aAAf,UACI,mBAAGC,QAAS,kBAAMR,EAAS,IAA3B,kBACCE,EAAYO,KAAI,SAACC,EAAQC,GACtB,IAAMC,EAAa,GAEnB,OADID,IAAUV,EAAc,GAAGW,EAAWN,KAAK,UAE3C,mBAAGC,UAAWK,EAAWC,KAAK,KAAmBL,QAAS,kBAAMR,EAASU,IAAzE,SACKA,GADoCA,MAKjD,mBAAGF,QAAS,kBAAMR,EAASE,EAAYY,SAAvC,yB,QCxBHC,G,MAAS,CAClB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OCjDiBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,YAAa,GACbC,SAAU,GACVC,iBAAiB,EACjBC,UAAW,GAPA,E,4DAWF,IAAD,OACRC,EAAmB,YAAOC,KAAKR,MAAMS,aA2BzC,OAzBID,KAAKP,MAAMC,YAAYQ,SACvBH,EAAsBA,EAAoBI,QAAO,SAAAC,GAC7C,OAAOA,EAAKX,MAAMY,cAAcC,SAAS,EAAKb,MAAMC,YAAYQ,OAAOG,mBAI3EL,KAAKP,MAAME,YAAYO,SACvBH,EAAsBA,EAAoBI,QAAO,SAAAC,GAC7C,OAAOA,EAAKG,MAAMF,cAAcC,SAAS,EAAKb,MAAME,YAAYO,OAAOG,mBAI3EL,KAAKP,MAAMI,kBACXE,EAAsBA,EAAoBI,QAAO,SAAAC,GAC7C,OACIA,EAAKI,KAAKH,cAAcC,SAAS,EAAKb,MAAMG,SAASM,OAAOG,gBACzDD,EAAKX,MAAMY,cAAcC,SAAS,EAAKb,MAAMG,SAASM,OAAOG,gBAC7DD,EAAKG,MAAMF,cAAcC,SAAS,EAAKb,MAAMG,SAASM,OAAOG,kBAGxEL,KAAKS,SAAS,CAAEZ,iBAAiB,KAGrCE,EAAoBW,KAAKV,KAAKW,WAAWX,KAAKP,MAAMK,WAE7CC,I,iCAGAa,GACP,OAAO,SAACC,EAAIC,GACR,IAAIC,EAAQF,EAAGL,KAAKH,cAChBW,EAAQF,EAAGN,KAAKH,cAEpB,OAAIU,EAAQC,EACD,EAAIJ,EACXG,EAAQC,GACA,EAAIJ,EACT,K,+BAIL,IAAD,OACL,OACI,8BACI,wBAAO9B,UAAU,mBAAjB,UACI,gCACI,+BACI,sCACA,sCACA,4CAEI,yBAAQ0B,KAAK,QAAQS,GAAG,cAAcC,MAAOlB,KAAKP,MAAMC,YAAayB,SAAU,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAAEf,YAAa0B,EAAEC,OAAOH,SAA1H,UACI,wBAAQA,MAAM,GAAd,gBACC5B,GAAUA,EAAON,KAAI,SAACS,EAAOP,GAAR,OAClB,wBAAoBgC,MAAOzB,EAA3B,SAAmCA,GAAtBP,YAIzB,uCACA,6CAEI,uBAAOoC,KAAK,OAAOL,GAAG,cAAcC,MAAOlB,KAAKP,MAAME,YAAawB,SAAU,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAAEd,YAAayB,EAAEC,OAAOH,SAAUK,YAAY,yBAI1J,gCACKvB,KAAKR,MAAMS,aAAeD,KAAKwB,gBAAgBxC,KAAI,SAACyC,EAAYvC,GAAb,OAChD,+BACI,6BAAKuC,EAAWjB,OAChB,6BAAKiB,EAAWC,OAChB,6BAAKD,EAAWhC,QAChB,6BAAKgC,EAAWE,YAChB,6BAAKF,EAAWlB,UALXrB,iB,GAlFO0C,a,OCF/BC,G,MAAb,kDACI,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IACDsC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAHN,EADvB,yDAOiBE,GACTjC,KAAKR,MAAM2B,SAASc,KAR5B,oCAWkBA,GACQ,UAAdA,EAAMC,KACNlC,KAAKR,MAAM2C,eAAeF,KAbtC,+BAiBc,IAAD,OACL,OACI,sBAAKnD,UAAU,SAAf,UACI,uBAAOwC,KAAK,OAAOL,GAAG,YAClBM,YAAY,SACZJ,SAAWnB,KAAK8B,aAChBM,UAAWpC,KAAKgC,gBAJxB,QAMI,wBAAQf,GAAG,kBAAkBlC,QAAS,SAACqC,GAAD,OAAO,EAAK5B,MAAM2C,eAAef,IAAvE,6BAzBhB,GAAkCQ,c,gCCFrBS,EAAkB,kBAEzBC,EAAiB,SAACC,GAAD,MAAW,CAC9BjB,KAAMe,EACNpC,YAAasC,IAuBJC,EAfY,SAACC,GACtB,MAAO,CACHC,qBADG,WAEC,8CAAO,WAAMC,GAAN,eAAAC,EAAA,sEACoBH,EClBL,6DDkB+B,CAC7CI,QAVM,CACtBC,cAAe,uBACf,eAAiB,sBAMF,UAIqB,OAHlBC,EADH,QAIUC,OAJV,6BAKCL,EALD,KAKUL,EALV,SAK+BS,EAASE,OALxC,kGAAP,wDAYwBC,CAAiBT,OErB/CU,E,kDACF,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IAaVjB,SAAW,SAAA6E,GACP,EAAK3C,SAAS,CAAEjC,YAAa4E,KAfd,EAsBnBjC,SAAW,SAACC,GACR,IAAMmB,EAAOnB,EAAEC,OAAOH,MACtB,EAAKT,SAAS,CAAE4C,aAAcd,IACjB,KAATA,QAAwBe,IAATf,GACf,EAAK9B,SAAS,CAAE8C,SAAU,EAAK/D,MAAMS,eA1B1B,EA8BnBkC,eAAiB,WACb,GAAI,EAAK1C,MAAM4D,aAAc,CACzB,IAAMd,EAAO,EAAK9C,MAAM8D,SAASpD,QAAO,SAAAqD,GAAG,OAAIA,EAAIhD,KAAKiD,cAAcC,QAAQ,EAAKjE,MAAM4D,aAAaI,gBAAkB,GACpHD,EAAI9B,KAAK+B,cAAcC,QAAQ,EAAKjE,MAAM4D,aAAaI,gBAAkB,GACzED,EAAIjD,MAAMkD,cAAcC,QAAQ,EAAKjE,MAAM4D,aAAaI,gBAAkB,KAC1ElB,EAAKlD,OAAS,EACd,EAAKoB,SAAS,CAAE8C,SAAUhB,IAE1B,EAAK9B,SAAS,CAAE8C,SAAU,OApClC,EAAK9D,MAAQ,CACT4D,aAAc,GACdE,SAAU,GACV/E,YAAa,EACbH,YAAa,IANF,E,gEAWf2B,KAAKR,MAAM8C,mB,gDAOWqB,GACtB3D,KAAKS,SAAS,CAAE8C,SAAUI,EAAU1D,gB,+BAwB9B,IAAD,SACgCD,KAAKP,MAAlCjB,EADH,EACGA,YAAaH,EADhB,EACgBA,YACfuF,EAAkBpF,EAAcH,EAChCwF,EAAmBD,EAAkBvF,EACrCyF,EAAkB9D,KAAKP,MAAM8D,SAASQ,MAAMF,EAAkBD,GAEpE,OACI,qCACI,cAAC,EAAD,CAAczC,SAAU,SAACC,GAAQ,EAAKD,SAASC,IAAMe,eAAgBnC,KAAKmC,iBAC1E,cAAC,EAAD,CAAgBlC,YAAa6D,IAC7B,cAAC,EAAD,CACIzF,YAAaA,EACbC,UAAW0B,KAAKP,MAAM8D,SAASlE,OAC/Bd,SAAUyB,KAAKzB,SACfC,YAAaA,W,GA1DEoD,aAiEtBoC,EAAiBC,aAC1B,SAAAxE,GAAK,MAAK,CACNQ,YAAaR,EAAMyE,kBAAkBjE,eAEzC,CACIqC,eAAgBE,EAAqBE,sBALfuB,CAO5Bd,GCpEagB,MARf,WACE,OACE,qBAAKrF,UAAU,MAAf,SACE,cAACkF,EAAD,O,+BCLAI,EAAe,CACjBnE,YAAa,MAgBFiE,EAbW,WAAmC,IAAlCzE,EAAiC,uDAAzB2E,EAAcC,EAAW,uCACxD,OAAOA,EAAO/C,MACV,KAAKe,EACD,kCACO5C,GADP,IAEIQ,YAAaoE,EAAOpE,cAG5B,QACI,OAAOR,I,QCHJ6E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,ECDKC,YACHC,YAAgB,CAAEf,sBAClBgB,YAAQC,YAAgBC,ODChCC,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.7ac0bc98.chunk.js","sourcesContent":["import './pagination.css';\n\nimport React from 'react';\n\nexport const Pagination = ({ dataPerPage, totaldata, paginate, currentPage }) => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totaldata / dataPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    return (\n        <nav>\n            <div className=\"pagination\">\n                <a onClick={() => paginate(1)}>&laquo;</a>\n                {pageNumbers.map((number, index) => {\n                    const applyStyle = [];\n                    if (index === currentPage - 1) applyStyle.push('active')\n                    return (\n                        <a className={applyStyle.join(\" \")} key={number} onClick={() => paginate(number)} >\n                            {number}\n                        </a>\n                    )\n                })}\n                <a onClick={() => paginate(pageNumbers.length)}>&raquo;</a>\n            </div>\n        </nav>\n    );\n};","export const states = [\n    \"AK\", \n    \"AL\", \n    \"AR\", \n    \"AS\", \n    \"AZ\", \n    \"CA\", \n    \"CO\", \n    \"CT\", \n    \"DC\", \n    \"DE\", \n    \"FL\", \n    \"GA\", \n    \"GU\", \n    \"HI\", \n    \"IA\", \n    \"ID\", \n    \"IL\", \n    \"IN\", \n    \"KS\", \n    \"KY\", \n    \"LA\", \n    \"MA\", \n    \"MD\", \n    \"ME\", \n    \"MI\", \n    \"MN\", \n    \"MO\", \n    \"MS\", \n    \"MT\", \n    \"NC\", \n    \"ND\", \n    \"NE\", \n    \"NH\", \n    \"NJ\", \n    \"NM\", \n    \"NV\", \n    \"NY\", \n    \"OH\", \n    \"OK\", \n    \"OR\", \n    \"PA\", \n    \"PR\", \n    \"RI\", \n    \"SC\", \n    \"SD\", \n    \"TN\", \n    \"TX\", \n    \"UT\", \n    \"VA\", \n    \"VI\", \n    \"VT\", \n    \"WA\", \n    \"WI\", \n    \"WV\", \n    \"WY\"\n]","import './restaurant-list.css';\n\nimport React, { Component } from 'react';\n\nimport { states } from '../../constants/constants';\n\nexport default class RestaurantList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stateFilter: '',\n            genreFilter: '',\n            txtFiter: '',\n            txtFilterActive: false,\n            nameSort: -1\n        };\n    }\n\n    filterAndSort() {\n        let filteredRestaurants = [...this.props.restaurants];\n\n        if (this.state.stateFilter.trim()) {\n            filteredRestaurants = filteredRestaurants.filter(rest => {\n                return rest.state.toUpperCase().includes(this.state.stateFilter.trim().toUpperCase());\n            });\n        }\n\n        if (this.state.genreFilter.trim()) {\n            filteredRestaurants = filteredRestaurants.filter(rest => {\n                return rest.genre.toUpperCase().includes(this.state.genreFilter.trim().toUpperCase());\n            });\n        }\n\n        if (this.state.txtFilterActive) {\n            filteredRestaurants = filteredRestaurants.filter(rest => {\n                return (\n                    rest.name.toUpperCase().includes(this.state.txtFiter.trim().toUpperCase())\n                    || rest.state.toUpperCase().includes(this.state.txtFiter.trim().toUpperCase())\n                    || rest.genre.toUpperCase().includes(this.state.txtFiter.trim().toUpperCase())\n                );\n            });\n            this.setState({ txtFilterActive: false });\n        }\n\n        filteredRestaurants.sort(this.sortByName(this.state.nameSort));\n\n        return filteredRestaurants;\n    }\n\n    sortByName(order) {\n        return (ra, rb) => {\n            let nameA = ra.name.toUpperCase();\n            let nameB = rb.name.toUpperCase();\n\n            if (nameA < nameB)\n                return 1 * order\n            if (nameA > nameB)\n                return -1 * order\n            return 0\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <table className=\"restaurant-table\" >\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>City</th>\n                            <th>\n                                State &nbsp;\n                                <select name=\"state\" id=\"stateFilter\" value={this.state.stateFilter} onChange={e => this.setState({ stateFilter: e.target.value })}>\n                                    <option value=\"\">--</option>\n                                    {states && states.map((state, index) => (\n                                        <option key={index} value={state}>{state}</option>\n                                    ))}\n                                </select>\n                            </th>\n                            <th>Phone</th>\n                            <th>\n                                Genres &nbsp;\n                                <input type=\"text\" id=\"genreFilter\" value={this.state.genreFilter} onChange={e => this.setState({ genreFilter: e.target.value })} placeholder=\"filter genre\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.restaurants && this.filterAndSort().map((restaurant, index) => (\n                            <tr key={index} >\n                                <td>{restaurant.name}</td>\n                                <td>{restaurant.city}</td>\n                                <td>{restaurant.state}</td>\n                                <td>{restaurant.telephone}</td>\n                                <td>{restaurant.genre}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    };\n}\n\n\n","import './search-filter.css';\n\nimport React, { Component } from 'react';\n\nexport class SearchFilter extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onChange(event);\n    }\n\n    handleKeyDown(event) {\n        if (event.key === \"Enter\") {\n            this.props.onClickHandler(event);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"search\">\n                <input type=\"text\" id=\"txtFilter\"\n                    placeholder=\"search\"\n                    onChange={ this.handleChange}\n                    onKeyDown={this.handleKeyDown}\n                /> &nbsp;\n                <button id=\"txtFilterSubmit\" onClick={(e) => this.props.onClickHandler(e)}> Search </button>\n            </div>\n\n        )\n    }\n}","import { GET_RESTAURANT_URL } from '../../constants/urls';\n\nexport const SET_RESTAURANTS = 'SET_RESTAURANTS';\n\nconst setRestaurants = (data) => ({\n    type: SET_RESTAURANTS,\n    restaurants: data,\n  });\n\nconst getHeaders = () => ({\n    Authorization: 'Api-Key q3MNxtfep8Gt',\n    \"Content-Type\" : \"application/json\",\n});\n\nconst fetchRestaurants = (fetch) => {\n    return {\n        getRestaurantDetails() {\n            return async dispatch => {\n                const response = await fetch(GET_RESTAURANT_URL, { \n                    headers: getHeaders(), \n                });\n                if (response.status === 200) {\n                    dispatch(setRestaurants(await response.json()));\n                }\n            };\n        },\n    };\n}\n\nexport const restaurantApiActions = fetchRestaurants(fetch);\n","export const GET_RESTAURANT_URL = 'https://code-challenge.spectrumtoolbox.com/api/restaurants';\n","import React, { Component } from 'react';\n\nimport { Pagination } from '../components/Pagination/Pagination';\nimport RestaurantList from '../components/RestaurantList/RestaurantList';\nimport { SearchFilter } from '../components/SearchFilter/SearchFilter';\nimport { connect } from 'react-redux';\nimport { restaurantApiActions } from '../store/actions/restaurants';\n\nclass RestaurantsContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchFilter: '',\n            gridData: [],\n            currentPage: 1,\n            dataPerPage: 10\n        };\n    }\n\n    componentDidMount() {\n        this.props.setRestaurants();\n    }\n\n    paginate = pageNumber => {\n        this.setState({ currentPage: pageNumber })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ gridData: nextProps.restaurants })\n    }\n\n    onChange = (e) => {\n        const data = e.target.value;\n        this.setState({ searchFilter: data });\n        if (data === \"\" || data === undefined) {\n            this.setState({ gridData: this.props.restaurants })\n        }\n    }\n\n    onClickHandler = () => {\n        if (this.state.searchFilter) {\n            const data = this.state.gridData.filter(row => row.name.toLowerCase().indexOf(this.state.searchFilter.toLowerCase()) > -1 ||\n                row.city.toLowerCase().indexOf(this.state.searchFilter.toLowerCase()) > -1 ||\n                row.genre.toLowerCase().indexOf(this.state.searchFilter.toLowerCase()) > -1)\n            if (data.length > 0) {\n                this.setState({ gridData: data })\n            } else {\n                this.setState({ gridData: [] })\n            }\n        }\n    }\n\n    render() {\n        const { currentPage, dataPerPage } = this.state;\n        const indexOfLastPost = currentPage * dataPerPage;\n        const indexOfFirstPost = indexOfLastPost - dataPerPage;\n        const currentGridData = this.state.gridData.slice(indexOfFirstPost, indexOfLastPost);\n\n        return (\n            <>\n                <SearchFilter onChange={(e) => { this.onChange(e) }} onClickHandler={this.onClickHandler} />\n                <RestaurantList restaurants={currentGridData} />\n                <Pagination\n                    dataPerPage={dataPerPage}\n                    totaldata={this.state.gridData.length}\n                    paginate={this.paginate}\n                    currentPage={currentPage}\n                />\n            </>\n        )\n    };\n}\n\nexport const RestaurantPage = connect(\n    state => ({\n        restaurants: state.restaurantReducer.restaurants\n    }),\n    {\n        setRestaurants: restaurantApiActions.getRestaurantDetails\n    }\n)(RestaurantsContainer);\n","import './App.css';\n\nimport { RestaurantPage } from './containers/Restaurants';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RestaurantPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { SET_RESTAURANTS } from '../actions/restaurants'\n\nconst initialState = {\n    restaurants: null\n};\n\nconst restaurantReducer = (state = initialState, action) => {\n    switch(action.type) {  \n        case SET_RESTAURANTS:\n            return{\n                ...state,\n                restaurants: action.restaurants\n            }\n\n        default:\n            return state\n    }\n};\n\nexport default restaurantReducer;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configureStore } from './store/index';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\n\nimport restaurantReducer from './reducers/restaurants';\nimport thunk from 'redux-thunk';\n\n//import logger from 'redux-logger';\n\nexport const configureStore = () => {\n    return createStore(\n        combineReducers({ restaurantReducer }),\n        compose(applyMiddleware(thunk))\n    );\n};\n"],"sourceRoot":""}